

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: user-onboarding-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    restart: unless-stopped

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: user-onboarding-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for persistent storage
  redis:
    image: redis:7-alpine
    container_name: user-onboarding-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user-onboarding-api
    ports:
      - "8000:8000"
    environment:
      # Okta Configuration
      OKTA_ORG_URL: ${OKTA_ORG_URL}
      OKTA_API_TOKEN: ${OKTA_API_TOKEN}
      
      # API Security
      API_KEY: ${API_KEY:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Storage Backend
      STORAGE_BACKEND: ${STORAGE_BACKEND:-redis}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_KEY_PREFIX: "user_onboarding:"
      REDIS_CONNECTION_TIMEOUT: 5
      
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_ENRICHMENT_TOPIC: user.enrichment.requested
      KAFKA_DLQ_TOPIC: user.enrichment.failed
      KAFKA_CONSUMER_GROUP: user-enrichment-workers
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/v1/healthz')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Enrichment Worker Service
  enrichment-worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Okta Configuration
      OKTA_ORG_URL: ${OKTA_ORG_URL}
      OKTA_API_TOKEN: ${OKTA_API_TOKEN}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Storage Backend
      STORAGE_BACKEND: ${STORAGE_BACKEND:-redis}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_KEY_PREFIX: "user_onboarding:"
      REDIS_CONNECTION_TIMEOUT: 5
      
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_ENRICHMENT_TOPIC: user.enrichment.requested
      KAFKA_DLQ_TOPIC: user.enrichment.failed
      KAFKA_CONSUMER_GROUP: user-enrichment-workers
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: python workers/enrichment_worker.py
    # Scale horizontally:
    deploy:
      replicas: 3  # Run 3 workers for parallel processing

  # Kafka UI (optional - for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: user-onboarding-kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
    driver: local

